#ifndef _PACKET_H
#define _PACKET_H
#include <string>
#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "message.pb.h"
#include <functional>

namespace message {
	class Packet
	{
	public:
		static Packet* Instance(void)
		{
			static Packet local;
			return &local;
		}

		static int Encode(::google::protobuf::Message* packet, char buff[]);
		static int Decode(char* buff);
		static void BuildPacketHead(Ipacket* packetHead, int64_t id , int destservertype = WORLDSERVER);

		void RegisterPacket(::google::protobuf::Message* packet);
		void RegisterPacket(::google::protobuf::Message* packet, std::function<bool(::google::protobuf::Message*)> fun);
		bool TriggerPacket(::google::protobuf::Message* packet);
		::google::protobuf::Message* GetPakcet(int Id);
	private:
		std::unordered_map<std::string, std::function<::google::protobuf::Message*()>> Packet_CreateFactorStringMap;
		std::unordered_map<int, std::function<::google::protobuf::Message*()>> Packet_CreateFactorMap;

		std::unordered_map<std::string, std::function<bool(::google::protobuf::Message*)>> Packet_Message_Map;
	};
#define REGISTER_PACKET(x, y) Packet::Instance()->RegisterPacket(x, y)
}
#endif //_PACKET_H