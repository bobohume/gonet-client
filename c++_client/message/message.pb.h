// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_message_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsIpacketImpl();
void InitDefaultsIpacket();
void InitDefaultsPlayerDataImpl();
void InitDefaultsPlayerData();
void InitDefaultsRpcHeadImpl();
void InitDefaultsRpcHead();
void InitDefaultsRpcPacketImpl();
void InitDefaultsRpcPacket();
void InitDefaultsClusterInfoImpl();
void InitDefaultsClusterInfo();
inline void InitDefaults() {
  InitDefaultsIpacket();
  InitDefaultsPlayerData();
  InitDefaultsRpcHead();
  InitDefaultsRpcPacket();
  InitDefaultsClusterInfo();
}
}  // namespace protobuf_message_2eproto
namespace message {
class ClusterInfo;
class ClusterInfoDefaultTypeInternal;
extern ClusterInfoDefaultTypeInternal _ClusterInfo_default_instance_;
class Ipacket;
class IpacketDefaultTypeInternal;
extern IpacketDefaultTypeInternal _Ipacket_default_instance_;
class PlayerData;
class PlayerDataDefaultTypeInternal;
extern PlayerDataDefaultTypeInternal _PlayerData_default_instance_;
class RpcHead;
class RpcHeadDefaultTypeInternal;
extern RpcHeadDefaultTypeInternal _RpcHead_default_instance_;
class RpcPacket;
class RpcPacketDefaultTypeInternal;
extern RpcPacketDefaultTypeInternal _RpcPacket_default_instance_;
}  // namespace message
namespace message {

enum SERVICE {
  NONE = 0,
  CLIENT = 1,
  GATESERVER = 2,
  ACCOUNTSERVER = 3,
  WORLDSERVER = 4,
  ZONESERVER = 5,
  WORLDDBSERVER = 6,
  SERVICE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SERVICE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SERVICE_IsValid(int value);
const SERVICE SERVICE_MIN = NONE;
const SERVICE SERVICE_MAX = WORLDDBSERVER;
const int SERVICE_ARRAYSIZE = SERVICE_MAX + 1;

const ::google::protobuf::EnumDescriptor* SERVICE_descriptor();
inline const ::std::string& SERVICE_Name(SERVICE value) {
  return ::google::protobuf::internal::NameOfEnum(
    SERVICE_descriptor(), value);
}
inline bool SERVICE_Parse(
    const ::std::string& name, SERVICE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SERVICE>(
    SERVICE_descriptor(), name, value);
}
enum CHAT {
  MSG_TYPE_WORLD = 0,
  MSG_TYPE_PRIVATE = 1,
  MSG_TYPE_ORG = 2,
  MSG_TYPE_COUNT = 3,
  CHAT_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CHAT_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CHAT_IsValid(int value);
const CHAT CHAT_MIN = MSG_TYPE_WORLD;
const CHAT CHAT_MAX = MSG_TYPE_COUNT;
const int CHAT_ARRAYSIZE = CHAT_MAX + 1;

const ::google::protobuf::EnumDescriptor* CHAT_descriptor();
inline const ::std::string& CHAT_Name(CHAT value) {
  return ::google::protobuf::internal::NameOfEnum(
    CHAT_descriptor(), value);
}
inline bool CHAT_Parse(
    const ::std::string& name, CHAT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CHAT>(
    CHAT_descriptor(), name, value);
}
enum SEND {
  POINT = 0,
  BALANCE = 1,
  BOARD_CAST = 2,
  SEND_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SEND_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SEND_IsValid(int value);
const SEND SEND_MIN = POINT;
const SEND SEND_MAX = BOARD_CAST;
const int SEND_ARRAYSIZE = SEND_MAX + 1;

const ::google::protobuf::EnumDescriptor* SEND_descriptor();
inline const ::std::string& SEND_Name(SEND value) {
  return ::google::protobuf::internal::NameOfEnum(
    SEND_descriptor(), value);
}
inline bool SEND_Parse(
    const ::std::string& name, SEND* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SEND>(
    SEND_descriptor(), name, value);
}
// ===================================================================

class Ipacket : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.Ipacket) */ {
 public:
  Ipacket();
  virtual ~Ipacket();

  Ipacket(const Ipacket& from);

  inline Ipacket& operator=(const Ipacket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ipacket(Ipacket&& from) noexcept
    : Ipacket() {
    *this = ::std::move(from);
  }

  inline Ipacket& operator=(Ipacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ipacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ipacket* internal_default_instance() {
    return reinterpret_cast<const Ipacket*>(
               &_Ipacket_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Ipacket* other);
  friend void swap(Ipacket& a, Ipacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ipacket* New() const PROTOBUF_FINAL { return New(NULL); }

  Ipacket* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ipacket& from);
  void MergeFrom(const Ipacket& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ipacket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 Stx = 1;
  void clear_stx();
  static const int kStxFieldNumber = 1;
  ::google::protobuf::int32 stx() const;
  void set_stx(::google::protobuf::int32 value);

  // .message.SERVICE DestServerType = 2;
  void clear_destservertype();
  static const int kDestServerTypeFieldNumber = 2;
  ::message::SERVICE destservertype() const;
  void set_destservertype(::message::SERVICE value);

  // int64 Id = 4;
  void clear_id();
  static const int kIdFieldNumber = 4;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // int32 Ckx = 3;
  void clear_ckx();
  static const int kCkxFieldNumber = 3;
  ::google::protobuf::int32 ckx() const;
  void set_ckx(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:message.Ipacket)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 stx_;
  int destservertype_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 ckx_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
  friend void ::protobuf_message_2eproto::InitDefaultsIpacketImpl();
};
// -------------------------------------------------------------------

class PlayerData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.PlayerData) */ {
 public:
  PlayerData();
  virtual ~PlayerData();

  PlayerData(const PlayerData& from);

  inline PlayerData& operator=(const PlayerData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerData(PlayerData&& from) noexcept
    : PlayerData() {
    *this = ::std::move(from);
  }

  inline PlayerData& operator=(PlayerData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerData* internal_default_instance() {
    return reinterpret_cast<const PlayerData*>(
               &_PlayerData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PlayerData* other);
  friend void swap(PlayerData& a, PlayerData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerData* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerData& from);
  void MergeFrom(const PlayerData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PlayerName = 2;
  void clear_playername();
  static const int kPlayerNameFieldNumber = 2;
  const ::std::string& playername() const;
  void set_playername(const ::std::string& value);
  #if LANG_CXX11
  void set_playername(::std::string&& value);
  #endif
  void set_playername(const char* value);
  void set_playername(const char* value, size_t size);
  ::std::string* mutable_playername();
  ::std::string* release_playername();
  void set_allocated_playername(::std::string* playername);

  // int64 PlayerID = 1;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  ::google::protobuf::int64 playerid() const;
  void set_playerid(::google::protobuf::int64 value);

  // int32 PlayerGold = 3;
  void clear_playergold();
  static const int kPlayerGoldFieldNumber = 3;
  ::google::protobuf::int32 playergold() const;
  void set_playergold(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:message.PlayerData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playername_;
  ::google::protobuf::int64 playerid_;
  ::google::protobuf::int32 playergold_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
  friend void ::protobuf_message_2eproto::InitDefaultsPlayerDataImpl();
};
// -------------------------------------------------------------------

class RpcHead : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.RpcHead) */ {
 public:
  RpcHead();
  virtual ~RpcHead();

  RpcHead(const RpcHead& from);

  inline RpcHead& operator=(const RpcHead& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RpcHead(RpcHead&& from) noexcept
    : RpcHead() {
    *this = ::std::move(from);
  }

  inline RpcHead& operator=(RpcHead&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcHead& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpcHead* internal_default_instance() {
    return reinterpret_cast<const RpcHead*>(
               &_RpcHead_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(RpcHead* other);
  friend void swap(RpcHead& a, RpcHead& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RpcHead* New() const PROTOBUF_FINAL { return New(NULL); }

  RpcHead* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RpcHead& from);
  void MergeFrom(const RpcHead& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RpcHead* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ActorName = 7;
  void clear_actorname();
  static const int kActorNameFieldNumber = 7;
  const ::std::string& actorname() const;
  void set_actorname(const ::std::string& value);
  #if LANG_CXX11
  void set_actorname(::std::string&& value);
  #endif
  void set_actorname(const char* value);
  void set_actorname(const char* value, size_t size);
  ::std::string* mutable_actorname();
  ::std::string* release_actorname();
  void set_allocated_actorname(::std::string* actorname);

  // int64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // uint32 SocketId = 2;
  void clear_socketid();
  static const int kSocketIdFieldNumber = 2;
  ::google::protobuf::uint32 socketid() const;
  void set_socketid(::google::protobuf::uint32 value);

  // uint32 SrcClusterId = 3;
  void clear_srcclusterid();
  static const int kSrcClusterIdFieldNumber = 3;
  ::google::protobuf::uint32 srcclusterid() const;
  void set_srcclusterid(::google::protobuf::uint32 value);

  // uint32 ClusterId = 4;
  void clear_clusterid();
  static const int kClusterIdFieldNumber = 4;
  ::google::protobuf::uint32 clusterid() const;
  void set_clusterid(::google::protobuf::uint32 value);

  // .message.SERVICE DestServerType = 5;
  void clear_destservertype();
  static const int kDestServerTypeFieldNumber = 5;
  ::message::SERVICE destservertype() const;
  void set_destservertype(::message::SERVICE value);

  // .message.SEND SendType = 6;
  void clear_sendtype();
  static const int kSendTypeFieldNumber = 6;
  ::message::SEND sendtype() const;
  void set_sendtype(::message::SEND value);

  // @@protoc_insertion_point(class_scope:message.RpcHead)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr actorname_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::uint32 socketid_;
  ::google::protobuf::uint32 srcclusterid_;
  ::google::protobuf::uint32 clusterid_;
  int destservertype_;
  int sendtype_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
  friend void ::protobuf_message_2eproto::InitDefaultsRpcHeadImpl();
};
// -------------------------------------------------------------------

class RpcPacket : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.RpcPacket) */ {
 public:
  RpcPacket();
  virtual ~RpcPacket();

  RpcPacket(const RpcPacket& from);

  inline RpcPacket& operator=(const RpcPacket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RpcPacket(RpcPacket&& from) noexcept
    : RpcPacket() {
    *this = ::std::move(from);
  }

  inline RpcPacket& operator=(RpcPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpcPacket* internal_default_instance() {
    return reinterpret_cast<const RpcPacket*>(
               &_RpcPacket_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(RpcPacket* other);
  friend void swap(RpcPacket& a, RpcPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RpcPacket* New() const PROTOBUF_FINAL { return New(NULL); }

  RpcPacket* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RpcPacket& from);
  void MergeFrom(const RpcPacket& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RpcPacket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string FuncName = 1;
  void clear_funcname();
  static const int kFuncNameFieldNumber = 1;
  const ::std::string& funcname() const;
  void set_funcname(const ::std::string& value);
  #if LANG_CXX11
  void set_funcname(::std::string&& value);
  #endif
  void set_funcname(const char* value);
  void set_funcname(const char* value, size_t size);
  ::std::string* mutable_funcname();
  ::std::string* release_funcname();
  void set_allocated_funcname(::std::string* funcname);

  // bytes RpcBody = 4;
  void clear_rpcbody();
  static const int kRpcBodyFieldNumber = 4;
  const ::std::string& rpcbody() const;
  void set_rpcbody(const ::std::string& value);
  #if LANG_CXX11
  void set_rpcbody(::std::string&& value);
  #endif
  void set_rpcbody(const char* value);
  void set_rpcbody(const void* value, size_t size);
  ::std::string* mutable_rpcbody();
  ::std::string* release_rpcbody();
  void set_allocated_rpcbody(::std::string* rpcbody);

  // .message.RpcHead RpcHead = 3;
  bool has_rpchead() const;
  void clear_rpchead();
  static const int kRpcHeadFieldNumber = 3;
  const ::message::RpcHead& rpchead() const;
  ::message::RpcHead* release_rpchead();
  ::message::RpcHead* mutable_rpchead();
  void set_allocated_rpchead(::message::RpcHead* rpchead);

  // int32 ArgLen = 2;
  void clear_arglen();
  static const int kArgLenFieldNumber = 2;
  ::google::protobuf::int32 arglen() const;
  void set_arglen(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:message.RpcPacket)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr funcname_;
  ::google::protobuf::internal::ArenaStringPtr rpcbody_;
  ::message::RpcHead* rpchead_;
  ::google::protobuf::int32 arglen_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
  friend void ::protobuf_message_2eproto::InitDefaultsRpcPacketImpl();
};
// -------------------------------------------------------------------

class ClusterInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.ClusterInfo) */ {
 public:
  ClusterInfo();
  virtual ~ClusterInfo();

  ClusterInfo(const ClusterInfo& from);

  inline ClusterInfo& operator=(const ClusterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClusterInfo(ClusterInfo&& from) noexcept
    : ClusterInfo() {
    *this = ::std::move(from);
  }

  inline ClusterInfo& operator=(ClusterInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClusterInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClusterInfo* internal_default_instance() {
    return reinterpret_cast<const ClusterInfo*>(
               &_ClusterInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ClusterInfo* other);
  friend void swap(ClusterInfo& a, ClusterInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClusterInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ClusterInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClusterInfo& from);
  void MergeFrom(const ClusterInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClusterInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Ip = 2;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // .message.SERVICE Type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::message::SERVICE type() const;
  void set_type(::message::SERVICE value);

  // int32 Port = 3;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // int32 Weight = 4;
  void clear_weight();
  static const int kWeightFieldNumber = 4;
  ::google::protobuf::int32 weight() const;
  void set_weight(::google::protobuf::int32 value);

  // uint32 SocketId = 5;
  void clear_socketid();
  static const int kSocketIdFieldNumber = 5;
  ::google::protobuf::uint32 socketid() const;
  void set_socketid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:message.ClusterInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  int type_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 weight_;
  ::google::protobuf::uint32 socketid_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
  friend void ::protobuf_message_2eproto::InitDefaultsClusterInfoImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Ipacket

// int32 Stx = 1;
inline void Ipacket::clear_stx() {
  stx_ = 0;
}
inline ::google::protobuf::int32 Ipacket::stx() const {
  // @@protoc_insertion_point(field_get:message.Ipacket.Stx)
  return stx_;
}
inline void Ipacket::set_stx(::google::protobuf::int32 value) {
  
  stx_ = value;
  // @@protoc_insertion_point(field_set:message.Ipacket.Stx)
}

// .message.SERVICE DestServerType = 2;
inline void Ipacket::clear_destservertype() {
  destservertype_ = 0;
}
inline ::message::SERVICE Ipacket::destservertype() const {
  // @@protoc_insertion_point(field_get:message.Ipacket.DestServerType)
  return static_cast< ::message::SERVICE >(destservertype_);
}
inline void Ipacket::set_destservertype(::message::SERVICE value) {
  
  destservertype_ = value;
  // @@protoc_insertion_point(field_set:message.Ipacket.DestServerType)
}

// int32 Ckx = 3;
inline void Ipacket::clear_ckx() {
  ckx_ = 0;
}
inline ::google::protobuf::int32 Ipacket::ckx() const {
  // @@protoc_insertion_point(field_get:message.Ipacket.Ckx)
  return ckx_;
}
inline void Ipacket::set_ckx(::google::protobuf::int32 value) {
  
  ckx_ = value;
  // @@protoc_insertion_point(field_set:message.Ipacket.Ckx)
}

// int64 Id = 4;
inline void Ipacket::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Ipacket::id() const {
  // @@protoc_insertion_point(field_get:message.Ipacket.Id)
  return id_;
}
inline void Ipacket::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:message.Ipacket.Id)
}

// -------------------------------------------------------------------

// PlayerData

// int64 PlayerID = 1;
inline void PlayerData::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PlayerData::playerid() const {
  // @@protoc_insertion_point(field_get:message.PlayerData.PlayerID)
  return playerid_;
}
inline void PlayerData::set_playerid(::google::protobuf::int64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:message.PlayerData.PlayerID)
}

// string PlayerName = 2;
inline void PlayerData::clear_playername() {
  playername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerData::playername() const {
  // @@protoc_insertion_point(field_get:message.PlayerData.PlayerName)
  return playername_.GetNoArena();
}
inline void PlayerData::set_playername(const ::std::string& value) {
  
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.PlayerData.PlayerName)
}
#if LANG_CXX11
inline void PlayerData::set_playername(::std::string&& value) {
  
  playername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.PlayerData.PlayerName)
}
#endif
inline void PlayerData::set_playername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.PlayerData.PlayerName)
}
inline void PlayerData::set_playername(const char* value, size_t size) {
  
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.PlayerData.PlayerName)
}
inline ::std::string* PlayerData::mutable_playername() {
  
  // @@protoc_insertion_point(field_mutable:message.PlayerData.PlayerName)
  return playername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerData::release_playername() {
  // @@protoc_insertion_point(field_release:message.PlayerData.PlayerName)
  
  return playername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerData::set_allocated_playername(::std::string* playername) {
  if (playername != NULL) {
    
  } else {
    
  }
  playername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playername);
  // @@protoc_insertion_point(field_set_allocated:message.PlayerData.PlayerName)
}

// int32 PlayerGold = 3;
inline void PlayerData::clear_playergold() {
  playergold_ = 0;
}
inline ::google::protobuf::int32 PlayerData::playergold() const {
  // @@protoc_insertion_point(field_get:message.PlayerData.PlayerGold)
  return playergold_;
}
inline void PlayerData::set_playergold(::google::protobuf::int32 value) {
  
  playergold_ = value;
  // @@protoc_insertion_point(field_set:message.PlayerData.PlayerGold)
}

// -------------------------------------------------------------------

// RpcHead

// int64 Id = 1;
inline void RpcHead::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RpcHead::id() const {
  // @@protoc_insertion_point(field_get:message.RpcHead.Id)
  return id_;
}
inline void RpcHead::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:message.RpcHead.Id)
}

// uint32 SocketId = 2;
inline void RpcHead::clear_socketid() {
  socketid_ = 0u;
}
inline ::google::protobuf::uint32 RpcHead::socketid() const {
  // @@protoc_insertion_point(field_get:message.RpcHead.SocketId)
  return socketid_;
}
inline void RpcHead::set_socketid(::google::protobuf::uint32 value) {
  
  socketid_ = value;
  // @@protoc_insertion_point(field_set:message.RpcHead.SocketId)
}

// uint32 SrcClusterId = 3;
inline void RpcHead::clear_srcclusterid() {
  srcclusterid_ = 0u;
}
inline ::google::protobuf::uint32 RpcHead::srcclusterid() const {
  // @@protoc_insertion_point(field_get:message.RpcHead.SrcClusterId)
  return srcclusterid_;
}
inline void RpcHead::set_srcclusterid(::google::protobuf::uint32 value) {
  
  srcclusterid_ = value;
  // @@protoc_insertion_point(field_set:message.RpcHead.SrcClusterId)
}

// uint32 ClusterId = 4;
inline void RpcHead::clear_clusterid() {
  clusterid_ = 0u;
}
inline ::google::protobuf::uint32 RpcHead::clusterid() const {
  // @@protoc_insertion_point(field_get:message.RpcHead.ClusterId)
  return clusterid_;
}
inline void RpcHead::set_clusterid(::google::protobuf::uint32 value) {
  
  clusterid_ = value;
  // @@protoc_insertion_point(field_set:message.RpcHead.ClusterId)
}

// .message.SERVICE DestServerType = 5;
inline void RpcHead::clear_destservertype() {
  destservertype_ = 0;
}
inline ::message::SERVICE RpcHead::destservertype() const {
  // @@protoc_insertion_point(field_get:message.RpcHead.DestServerType)
  return static_cast< ::message::SERVICE >(destservertype_);
}
inline void RpcHead::set_destservertype(::message::SERVICE value) {
  
  destservertype_ = value;
  // @@protoc_insertion_point(field_set:message.RpcHead.DestServerType)
}

// .message.SEND SendType = 6;
inline void RpcHead::clear_sendtype() {
  sendtype_ = 0;
}
inline ::message::SEND RpcHead::sendtype() const {
  // @@protoc_insertion_point(field_get:message.RpcHead.SendType)
  return static_cast< ::message::SEND >(sendtype_);
}
inline void RpcHead::set_sendtype(::message::SEND value) {
  
  sendtype_ = value;
  // @@protoc_insertion_point(field_set:message.RpcHead.SendType)
}

// string ActorName = 7;
inline void RpcHead::clear_actorname() {
  actorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RpcHead::actorname() const {
  // @@protoc_insertion_point(field_get:message.RpcHead.ActorName)
  return actorname_.GetNoArena();
}
inline void RpcHead::set_actorname(const ::std::string& value) {
  
  actorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.RpcHead.ActorName)
}
#if LANG_CXX11
inline void RpcHead::set_actorname(::std::string&& value) {
  
  actorname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.RpcHead.ActorName)
}
#endif
inline void RpcHead::set_actorname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  actorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.RpcHead.ActorName)
}
inline void RpcHead::set_actorname(const char* value, size_t size) {
  
  actorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.RpcHead.ActorName)
}
inline ::std::string* RpcHead::mutable_actorname() {
  
  // @@protoc_insertion_point(field_mutable:message.RpcHead.ActorName)
  return actorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcHead::release_actorname() {
  // @@protoc_insertion_point(field_release:message.RpcHead.ActorName)
  
  return actorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcHead::set_allocated_actorname(::std::string* actorname) {
  if (actorname != NULL) {
    
  } else {
    
  }
  actorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), actorname);
  // @@protoc_insertion_point(field_set_allocated:message.RpcHead.ActorName)
}

// -------------------------------------------------------------------

// RpcPacket

// string FuncName = 1;
inline void RpcPacket::clear_funcname() {
  funcname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RpcPacket::funcname() const {
  // @@protoc_insertion_point(field_get:message.RpcPacket.FuncName)
  return funcname_.GetNoArena();
}
inline void RpcPacket::set_funcname(const ::std::string& value) {
  
  funcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.RpcPacket.FuncName)
}
#if LANG_CXX11
inline void RpcPacket::set_funcname(::std::string&& value) {
  
  funcname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.RpcPacket.FuncName)
}
#endif
inline void RpcPacket::set_funcname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  funcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.RpcPacket.FuncName)
}
inline void RpcPacket::set_funcname(const char* value, size_t size) {
  
  funcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.RpcPacket.FuncName)
}
inline ::std::string* RpcPacket::mutable_funcname() {
  
  // @@protoc_insertion_point(field_mutable:message.RpcPacket.FuncName)
  return funcname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcPacket::release_funcname() {
  // @@protoc_insertion_point(field_release:message.RpcPacket.FuncName)
  
  return funcname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcPacket::set_allocated_funcname(::std::string* funcname) {
  if (funcname != NULL) {
    
  } else {
    
  }
  funcname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), funcname);
  // @@protoc_insertion_point(field_set_allocated:message.RpcPacket.FuncName)
}

// int32 ArgLen = 2;
inline void RpcPacket::clear_arglen() {
  arglen_ = 0;
}
inline ::google::protobuf::int32 RpcPacket::arglen() const {
  // @@protoc_insertion_point(field_get:message.RpcPacket.ArgLen)
  return arglen_;
}
inline void RpcPacket::set_arglen(::google::protobuf::int32 value) {
  
  arglen_ = value;
  // @@protoc_insertion_point(field_set:message.RpcPacket.ArgLen)
}

// .message.RpcHead RpcHead = 3;
inline bool RpcPacket::has_rpchead() const {
  return this != internal_default_instance() && rpchead_ != NULL;
}
inline void RpcPacket::clear_rpchead() {
  if (GetArenaNoVirtual() == NULL && rpchead_ != NULL) {
    delete rpchead_;
  }
  rpchead_ = NULL;
}
inline const ::message::RpcHead& RpcPacket::rpchead() const {
  const ::message::RpcHead* p = rpchead_;
  // @@protoc_insertion_point(field_get:message.RpcPacket.RpcHead)
  return p != NULL ? *p : *reinterpret_cast<const ::message::RpcHead*>(
      &::message::_RpcHead_default_instance_);
}
inline ::message::RpcHead* RpcPacket::release_rpchead() {
  // @@protoc_insertion_point(field_release:message.RpcPacket.RpcHead)
  
  ::message::RpcHead* temp = rpchead_;
  rpchead_ = NULL;
  return temp;
}
inline ::message::RpcHead* RpcPacket::mutable_rpchead() {
  
  if (rpchead_ == NULL) {
    rpchead_ = new ::message::RpcHead;
  }
  // @@protoc_insertion_point(field_mutable:message.RpcPacket.RpcHead)
  return rpchead_;
}
inline void RpcPacket::set_allocated_rpchead(::message::RpcHead* rpchead) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rpchead_;
  }
  if (rpchead) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rpchead = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rpchead, submessage_arena);
    }
    
  } else {
    
  }
  rpchead_ = rpchead;
  // @@protoc_insertion_point(field_set_allocated:message.RpcPacket.RpcHead)
}

// bytes RpcBody = 4;
inline void RpcPacket::clear_rpcbody() {
  rpcbody_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RpcPacket::rpcbody() const {
  // @@protoc_insertion_point(field_get:message.RpcPacket.RpcBody)
  return rpcbody_.GetNoArena();
}
inline void RpcPacket::set_rpcbody(const ::std::string& value) {
  
  rpcbody_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.RpcPacket.RpcBody)
}
#if LANG_CXX11
inline void RpcPacket::set_rpcbody(::std::string&& value) {
  
  rpcbody_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.RpcPacket.RpcBody)
}
#endif
inline void RpcPacket::set_rpcbody(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rpcbody_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.RpcPacket.RpcBody)
}
inline void RpcPacket::set_rpcbody(const void* value, size_t size) {
  
  rpcbody_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.RpcPacket.RpcBody)
}
inline ::std::string* RpcPacket::mutable_rpcbody() {
  
  // @@protoc_insertion_point(field_mutable:message.RpcPacket.RpcBody)
  return rpcbody_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcPacket::release_rpcbody() {
  // @@protoc_insertion_point(field_release:message.RpcPacket.RpcBody)
  
  return rpcbody_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcPacket::set_allocated_rpcbody(::std::string* rpcbody) {
  if (rpcbody != NULL) {
    
  } else {
    
  }
  rpcbody_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rpcbody);
  // @@protoc_insertion_point(field_set_allocated:message.RpcPacket.RpcBody)
}

// -------------------------------------------------------------------

// ClusterInfo

// .message.SERVICE Type = 1;
inline void ClusterInfo::clear_type() {
  type_ = 0;
}
inline ::message::SERVICE ClusterInfo::type() const {
  // @@protoc_insertion_point(field_get:message.ClusterInfo.Type)
  return static_cast< ::message::SERVICE >(type_);
}
inline void ClusterInfo::set_type(::message::SERVICE value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:message.ClusterInfo.Type)
}

// string Ip = 2;
inline void ClusterInfo::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClusterInfo::ip() const {
  // @@protoc_insertion_point(field_get:message.ClusterInfo.Ip)
  return ip_.GetNoArena();
}
inline void ClusterInfo::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.ClusterInfo.Ip)
}
#if LANG_CXX11
inline void ClusterInfo::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.ClusterInfo.Ip)
}
#endif
inline void ClusterInfo::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.ClusterInfo.Ip)
}
inline void ClusterInfo::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.ClusterInfo.Ip)
}
inline ::std::string* ClusterInfo::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:message.ClusterInfo.Ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClusterInfo::release_ip() {
  // @@protoc_insertion_point(field_release:message.ClusterInfo.Ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClusterInfo::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:message.ClusterInfo.Ip)
}

// int32 Port = 3;
inline void ClusterInfo::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 ClusterInfo::port() const {
  // @@protoc_insertion_point(field_get:message.ClusterInfo.Port)
  return port_;
}
inline void ClusterInfo::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:message.ClusterInfo.Port)
}

// int32 Weight = 4;
inline void ClusterInfo::clear_weight() {
  weight_ = 0;
}
inline ::google::protobuf::int32 ClusterInfo::weight() const {
  // @@protoc_insertion_point(field_get:message.ClusterInfo.Weight)
  return weight_;
}
inline void ClusterInfo::set_weight(::google::protobuf::int32 value) {
  
  weight_ = value;
  // @@protoc_insertion_point(field_set:message.ClusterInfo.Weight)
}

// uint32 SocketId = 5;
inline void ClusterInfo::clear_socketid() {
  socketid_ = 0u;
}
inline ::google::protobuf::uint32 ClusterInfo::socketid() const {
  // @@protoc_insertion_point(field_get:message.ClusterInfo.SocketId)
  return socketid_;
}
inline void ClusterInfo::set_socketid(::google::protobuf::uint32 value) {
  
  socketid_ = value;
  // @@protoc_insertion_point(field_set:message.ClusterInfo.SocketId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::message::SERVICE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::SERVICE>() {
  return ::message::SERVICE_descriptor();
}
template <> struct is_proto_enum< ::message::CHAT> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::CHAT>() {
  return ::message::CHAT_descriptor();
}
template <> struct is_proto_enum< ::message::SEND> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::SEND>() {
  return ::message::SEND_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
