// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_message_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[18];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsIpacketImpl();
void InitDefaultsIpacket();
void InitDefaultsPlayerDataImpl();
void InitDefaultsPlayerData();
void InitDefaultsIntImpl();
void InitDefaultsInt();
void InitDefaultsIntSliceImpl();
void InitDefaultsIntSlice();
void InitDefaultsUIntImpl();
void InitDefaultsUInt();
void InitDefaultsUIntSliceImpl();
void InitDefaultsUIntSlice();
void InitDefaultsInt64Impl();
void InitDefaultsInt64();
void InitDefaultsInt64SliceImpl();
void InitDefaultsInt64Slice();
void InitDefaultsUInt64Impl();
void InitDefaultsUInt64();
void InitDefaultsUInt64SliceImpl();
void InitDefaultsUInt64Slice();
void InitDefaultsFloatImpl();
void InitDefaultsFloat();
void InitDefaultsFloatSliceImpl();
void InitDefaultsFloatSlice();
void InitDefaultsDoubleImpl();
void InitDefaultsDouble();
void InitDefaultsDoubleSliceImpl();
void InitDefaultsDoubleSlice();
void InitDefaultsStringImpl();
void InitDefaultsString();
void InitDefaultsStringSliceImpl();
void InitDefaultsStringSlice();
void InitDefaultsBoolImpl();
void InitDefaultsBool();
void InitDefaultsBoolSliceImpl();
void InitDefaultsBoolSlice();
inline void InitDefaults() {
  InitDefaultsIpacket();
  InitDefaultsPlayerData();
  InitDefaultsInt();
  InitDefaultsIntSlice();
  InitDefaultsUInt();
  InitDefaultsUIntSlice();
  InitDefaultsInt64();
  InitDefaultsInt64Slice();
  InitDefaultsUInt64();
  InitDefaultsUInt64Slice();
  InitDefaultsFloat();
  InitDefaultsFloatSlice();
  InitDefaultsDouble();
  InitDefaultsDoubleSlice();
  InitDefaultsString();
  InitDefaultsStringSlice();
  InitDefaultsBool();
  InitDefaultsBoolSlice();
}
}  // namespace protobuf_message_2eproto
namespace message {
class Bool;
class BoolDefaultTypeInternal;
extern BoolDefaultTypeInternal _Bool_default_instance_;
class BoolSlice;
class BoolSliceDefaultTypeInternal;
extern BoolSliceDefaultTypeInternal _BoolSlice_default_instance_;
class Double;
class DoubleDefaultTypeInternal;
extern DoubleDefaultTypeInternal _Double_default_instance_;
class DoubleSlice;
class DoubleSliceDefaultTypeInternal;
extern DoubleSliceDefaultTypeInternal _DoubleSlice_default_instance_;
class Float;
class FloatDefaultTypeInternal;
extern FloatDefaultTypeInternal _Float_default_instance_;
class FloatSlice;
class FloatSliceDefaultTypeInternal;
extern FloatSliceDefaultTypeInternal _FloatSlice_default_instance_;
class Int;
class IntDefaultTypeInternal;
extern IntDefaultTypeInternal _Int_default_instance_;
class Int64;
class Int64DefaultTypeInternal;
extern Int64DefaultTypeInternal _Int64_default_instance_;
class Int64Slice;
class Int64SliceDefaultTypeInternal;
extern Int64SliceDefaultTypeInternal _Int64Slice_default_instance_;
class IntSlice;
class IntSliceDefaultTypeInternal;
extern IntSliceDefaultTypeInternal _IntSlice_default_instance_;
class Ipacket;
class IpacketDefaultTypeInternal;
extern IpacketDefaultTypeInternal _Ipacket_default_instance_;
class PlayerData;
class PlayerDataDefaultTypeInternal;
extern PlayerDataDefaultTypeInternal _PlayerData_default_instance_;
class String;
class StringDefaultTypeInternal;
extern StringDefaultTypeInternal _String_default_instance_;
class StringSlice;
class StringSliceDefaultTypeInternal;
extern StringSliceDefaultTypeInternal _StringSlice_default_instance_;
class UInt;
class UIntDefaultTypeInternal;
extern UIntDefaultTypeInternal _UInt_default_instance_;
class UInt64;
class UInt64DefaultTypeInternal;
extern UInt64DefaultTypeInternal _UInt64_default_instance_;
class UInt64Slice;
class UInt64SliceDefaultTypeInternal;
extern UInt64SliceDefaultTypeInternal _UInt64Slice_default_instance_;
class UIntSlice;
class UIntSliceDefaultTypeInternal;
extern UIntSliceDefaultTypeInternal _UIntSlice_default_instance_;
}  // namespace message
namespace message {

enum SERVICE {
  NONE = 0,
  CLIENT = 1,
  GATESERVER = 2,
  ACCOUNTSERVER = 3,
  WORLDSERVER = 4,
  ZONESERVER = 5,
  WORLDDBSERVER = 6,
  SERVICE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SERVICE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SERVICE_IsValid(int value);
const SERVICE SERVICE_MIN = NONE;
const SERVICE SERVICE_MAX = WORLDDBSERVER;
const int SERVICE_ARRAYSIZE = SERVICE_MAX + 1;

const ::google::protobuf::EnumDescriptor* SERVICE_descriptor();
inline const ::std::string& SERVICE_Name(SERVICE value) {
  return ::google::protobuf::internal::NameOfEnum(
    SERVICE_descriptor(), value);
}
inline bool SERVICE_Parse(
    const ::std::string& name, SERVICE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SERVICE>(
    SERVICE_descriptor(), name, value);
}
enum CHAT {
  MSG_TYPE_WORLD = 0,
  MSG_TYPE_PRIVATE = 1,
  MSG_TYPE_ORG = 2,
  MSG_TYPE_COUNT = 3,
  CHAT_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CHAT_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CHAT_IsValid(int value);
const CHAT CHAT_MIN = MSG_TYPE_WORLD;
const CHAT CHAT_MAX = MSG_TYPE_COUNT;
const int CHAT_ARRAYSIZE = CHAT_MAX + 1;

const ::google::protobuf::EnumDescriptor* CHAT_descriptor();
inline const ::std::string& CHAT_Name(CHAT value) {
  return ::google::protobuf::internal::NameOfEnum(
    CHAT_descriptor(), value);
}
inline bool CHAT_Parse(
    const ::std::string& name, CHAT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CHAT>(
    CHAT_descriptor(), name, value);
}
// ===================================================================

class Ipacket : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.Ipacket) */ {
 public:
  Ipacket();
  virtual ~Ipacket();

  Ipacket(const Ipacket& from);

  inline Ipacket& operator=(const Ipacket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ipacket(Ipacket&& from) noexcept
    : Ipacket() {
    *this = ::std::move(from);
  }

  inline Ipacket& operator=(Ipacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ipacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ipacket* internal_default_instance() {
    return reinterpret_cast<const Ipacket*>(
               &_Ipacket_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Ipacket* other);
  friend void swap(Ipacket& a, Ipacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ipacket* New() const PROTOBUF_FINAL { return New(NULL); }

  Ipacket* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ipacket& from);
  void MergeFrom(const Ipacket& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ipacket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 Stx = 1;
  void clear_stx();
  static const int kStxFieldNumber = 1;
  ::google::protobuf::int32 stx() const;
  void set_stx(::google::protobuf::int32 value);

  // .message.SERVICE DestServerType = 2;
  void clear_destservertype();
  static const int kDestServerTypeFieldNumber = 2;
  ::message::SERVICE destservertype() const;
  void set_destservertype(::message::SERVICE value);

  // int64 Id = 4;
  void clear_id();
  static const int kIdFieldNumber = 4;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // int32 Ckx = 3;
  void clear_ckx();
  static const int kCkxFieldNumber = 3;
  ::google::protobuf::int32 ckx() const;
  void set_ckx(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:message.Ipacket)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 stx_;
  int destservertype_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 ckx_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
  friend void ::protobuf_message_2eproto::InitDefaultsIpacketImpl();
};
// -------------------------------------------------------------------

class PlayerData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.PlayerData) */ {
 public:
  PlayerData();
  virtual ~PlayerData();

  PlayerData(const PlayerData& from);

  inline PlayerData& operator=(const PlayerData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerData(PlayerData&& from) noexcept
    : PlayerData() {
    *this = ::std::move(from);
  }

  inline PlayerData& operator=(PlayerData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerData* internal_default_instance() {
    return reinterpret_cast<const PlayerData*>(
               &_PlayerData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PlayerData* other);
  friend void swap(PlayerData& a, PlayerData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerData* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerData& from);
  void MergeFrom(const PlayerData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PlayerName = 2;
  void clear_playername();
  static const int kPlayerNameFieldNumber = 2;
  const ::std::string& playername() const;
  void set_playername(const ::std::string& value);
  #if LANG_CXX11
  void set_playername(::std::string&& value);
  #endif
  void set_playername(const char* value);
  void set_playername(const char* value, size_t size);
  ::std::string* mutable_playername();
  ::std::string* release_playername();
  void set_allocated_playername(::std::string* playername);

  // int64 PlayerID = 1;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  ::google::protobuf::int64 playerid() const;
  void set_playerid(::google::protobuf::int64 value);

  // int32 PlayerGold = 3;
  void clear_playergold();
  static const int kPlayerGoldFieldNumber = 3;
  ::google::protobuf::int32 playergold() const;
  void set_playergold(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:message.PlayerData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playername_;
  ::google::protobuf::int64 playerid_;
  ::google::protobuf::int32 playergold_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
  friend void ::protobuf_message_2eproto::InitDefaultsPlayerDataImpl();
};
// -------------------------------------------------------------------

class Int : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.Int) */ {
 public:
  Int();
  virtual ~Int();

  Int(const Int& from);

  inline Int& operator=(const Int& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Int(Int&& from) noexcept
    : Int() {
    *this = ::std::move(from);
  }

  inline Int& operator=(Int&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Int& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Int* internal_default_instance() {
    return reinterpret_cast<const Int*>(
               &_Int_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Int* other);
  friend void swap(Int& a, Int& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Int* New() const PROTOBUF_FINAL { return New(NULL); }

  Int* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Int& from);
  void MergeFrom(const Int& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Int* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 Val = 1;
  void clear_val();
  static const int kValFieldNumber = 1;
  ::google::protobuf::int32 val() const;
  void set_val(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:message.Int)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 val_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
  friend void ::protobuf_message_2eproto::InitDefaultsIntImpl();
};
// -------------------------------------------------------------------

class IntSlice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.IntSlice) */ {
 public:
  IntSlice();
  virtual ~IntSlice();

  IntSlice(const IntSlice& from);

  inline IntSlice& operator=(const IntSlice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IntSlice(IntSlice&& from) noexcept
    : IntSlice() {
    *this = ::std::move(from);
  }

  inline IntSlice& operator=(IntSlice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IntSlice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntSlice* internal_default_instance() {
    return reinterpret_cast<const IntSlice*>(
               &_IntSlice_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(IntSlice* other);
  friend void swap(IntSlice& a, IntSlice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IntSlice* New() const PROTOBUF_FINAL { return New(NULL); }

  IntSlice* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IntSlice& from);
  void MergeFrom(const IntSlice& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IntSlice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 Val = 1;
  int val_size() const;
  void clear_val();
  static const int kValFieldNumber = 1;
  ::google::protobuf::int32 val(int index) const;
  void set_val(int index, ::google::protobuf::int32 value);
  void add_val(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      val() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_val();

  // @@protoc_insertion_point(class_scope:message.IntSlice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > val_;
  mutable int _val_cached_byte_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
  friend void ::protobuf_message_2eproto::InitDefaultsIntSliceImpl();
};
// -------------------------------------------------------------------

class UInt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.UInt) */ {
 public:
  UInt();
  virtual ~UInt();

  UInt(const UInt& from);

  inline UInt& operator=(const UInt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UInt(UInt&& from) noexcept
    : UInt() {
    *this = ::std::move(from);
  }

  inline UInt& operator=(UInt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UInt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UInt* internal_default_instance() {
    return reinterpret_cast<const UInt*>(
               &_UInt_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(UInt* other);
  friend void swap(UInt& a, UInt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UInt* New() const PROTOBUF_FINAL { return New(NULL); }

  UInt* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UInt& from);
  void MergeFrom(const UInt& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UInt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 Val = 1;
  void clear_val();
  static const int kValFieldNumber = 1;
  ::google::protobuf::uint32 val() const;
  void set_val(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:message.UInt)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 val_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
  friend void ::protobuf_message_2eproto::InitDefaultsUIntImpl();
};
// -------------------------------------------------------------------

class UIntSlice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.UIntSlice) */ {
 public:
  UIntSlice();
  virtual ~UIntSlice();

  UIntSlice(const UIntSlice& from);

  inline UIntSlice& operator=(const UIntSlice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UIntSlice(UIntSlice&& from) noexcept
    : UIntSlice() {
    *this = ::std::move(from);
  }

  inline UIntSlice& operator=(UIntSlice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UIntSlice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UIntSlice* internal_default_instance() {
    return reinterpret_cast<const UIntSlice*>(
               &_UIntSlice_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(UIntSlice* other);
  friend void swap(UIntSlice& a, UIntSlice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UIntSlice* New() const PROTOBUF_FINAL { return New(NULL); }

  UIntSlice* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UIntSlice& from);
  void MergeFrom(const UIntSlice& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UIntSlice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 Val = 1;
  int val_size() const;
  void clear_val();
  static const int kValFieldNumber = 1;
  ::google::protobuf::uint32 val(int index) const;
  void set_val(int index, ::google::protobuf::uint32 value);
  void add_val(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      val() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_val();

  // @@protoc_insertion_point(class_scope:message.UIntSlice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > val_;
  mutable int _val_cached_byte_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
  friend void ::protobuf_message_2eproto::InitDefaultsUIntSliceImpl();
};
// -------------------------------------------------------------------

class Int64 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.Int64) */ {
 public:
  Int64();
  virtual ~Int64();

  Int64(const Int64& from);

  inline Int64& operator=(const Int64& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Int64(Int64&& from) noexcept
    : Int64() {
    *this = ::std::move(from);
  }

  inline Int64& operator=(Int64&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Int64& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Int64* internal_default_instance() {
    return reinterpret_cast<const Int64*>(
               &_Int64_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Int64* other);
  friend void swap(Int64& a, Int64& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Int64* New() const PROTOBUF_FINAL { return New(NULL); }

  Int64* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Int64& from);
  void MergeFrom(const Int64& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Int64* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 Val = 1;
  void clear_val();
  static const int kValFieldNumber = 1;
  ::google::protobuf::int64 val() const;
  void set_val(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:message.Int64)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 val_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
  friend void ::protobuf_message_2eproto::InitDefaultsInt64Impl();
};
// -------------------------------------------------------------------

class Int64Slice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.Int64Slice) */ {
 public:
  Int64Slice();
  virtual ~Int64Slice();

  Int64Slice(const Int64Slice& from);

  inline Int64Slice& operator=(const Int64Slice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Int64Slice(Int64Slice&& from) noexcept
    : Int64Slice() {
    *this = ::std::move(from);
  }

  inline Int64Slice& operator=(Int64Slice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Int64Slice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Int64Slice* internal_default_instance() {
    return reinterpret_cast<const Int64Slice*>(
               &_Int64Slice_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Int64Slice* other);
  friend void swap(Int64Slice& a, Int64Slice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Int64Slice* New() const PROTOBUF_FINAL { return New(NULL); }

  Int64Slice* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Int64Slice& from);
  void MergeFrom(const Int64Slice& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Int64Slice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 Val = 1;
  int val_size() const;
  void clear_val();
  static const int kValFieldNumber = 1;
  ::google::protobuf::int64 val(int index) const;
  void set_val(int index, ::google::protobuf::int64 value);
  void add_val(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      val() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_val();

  // @@protoc_insertion_point(class_scope:message.Int64Slice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > val_;
  mutable int _val_cached_byte_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
  friend void ::protobuf_message_2eproto::InitDefaultsInt64SliceImpl();
};
// -------------------------------------------------------------------

class UInt64 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.UInt64) */ {
 public:
  UInt64();
  virtual ~UInt64();

  UInt64(const UInt64& from);

  inline UInt64& operator=(const UInt64& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UInt64(UInt64&& from) noexcept
    : UInt64() {
    *this = ::std::move(from);
  }

  inline UInt64& operator=(UInt64&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UInt64& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UInt64* internal_default_instance() {
    return reinterpret_cast<const UInt64*>(
               &_UInt64_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(UInt64* other);
  friend void swap(UInt64& a, UInt64& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UInt64* New() const PROTOBUF_FINAL { return New(NULL); }

  UInt64* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UInt64& from);
  void MergeFrom(const UInt64& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UInt64* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 Val = 1;
  void clear_val();
  static const int kValFieldNumber = 1;
  ::google::protobuf::uint64 val() const;
  void set_val(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:message.UInt64)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 val_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
  friend void ::protobuf_message_2eproto::InitDefaultsUInt64Impl();
};
// -------------------------------------------------------------------

class UInt64Slice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.UInt64Slice) */ {
 public:
  UInt64Slice();
  virtual ~UInt64Slice();

  UInt64Slice(const UInt64Slice& from);

  inline UInt64Slice& operator=(const UInt64Slice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UInt64Slice(UInt64Slice&& from) noexcept
    : UInt64Slice() {
    *this = ::std::move(from);
  }

  inline UInt64Slice& operator=(UInt64Slice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UInt64Slice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UInt64Slice* internal_default_instance() {
    return reinterpret_cast<const UInt64Slice*>(
               &_UInt64Slice_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(UInt64Slice* other);
  friend void swap(UInt64Slice& a, UInt64Slice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UInt64Slice* New() const PROTOBUF_FINAL { return New(NULL); }

  UInt64Slice* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UInt64Slice& from);
  void MergeFrom(const UInt64Slice& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UInt64Slice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 Val = 1;
  int val_size() const;
  void clear_val();
  static const int kValFieldNumber = 1;
  ::google::protobuf::uint64 val(int index) const;
  void set_val(int index, ::google::protobuf::uint64 value);
  void add_val(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      val() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_val();

  // @@protoc_insertion_point(class_scope:message.UInt64Slice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > val_;
  mutable int _val_cached_byte_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
  friend void ::protobuf_message_2eproto::InitDefaultsUInt64SliceImpl();
};
// -------------------------------------------------------------------

class Float : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.Float) */ {
 public:
  Float();
  virtual ~Float();

  Float(const Float& from);

  inline Float& operator=(const Float& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Float(Float&& from) noexcept
    : Float() {
    *this = ::std::move(from);
  }

  inline Float& operator=(Float&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Float& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Float* internal_default_instance() {
    return reinterpret_cast<const Float*>(
               &_Float_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(Float* other);
  friend void swap(Float& a, Float& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Float* New() const PROTOBUF_FINAL { return New(NULL); }

  Float* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Float& from);
  void MergeFrom(const Float& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Float* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float Val = 1;
  void clear_val();
  static const int kValFieldNumber = 1;
  float val() const;
  void set_val(float value);

  // @@protoc_insertion_point(class_scope:message.Float)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float val_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
  friend void ::protobuf_message_2eproto::InitDefaultsFloatImpl();
};
// -------------------------------------------------------------------

class FloatSlice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.FloatSlice) */ {
 public:
  FloatSlice();
  virtual ~FloatSlice();

  FloatSlice(const FloatSlice& from);

  inline FloatSlice& operator=(const FloatSlice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FloatSlice(FloatSlice&& from) noexcept
    : FloatSlice() {
    *this = ::std::move(from);
  }

  inline FloatSlice& operator=(FloatSlice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FloatSlice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FloatSlice* internal_default_instance() {
    return reinterpret_cast<const FloatSlice*>(
               &_FloatSlice_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(FloatSlice* other);
  friend void swap(FloatSlice& a, FloatSlice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FloatSlice* New() const PROTOBUF_FINAL { return New(NULL); }

  FloatSlice* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FloatSlice& from);
  void MergeFrom(const FloatSlice& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FloatSlice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float Val = 1;
  int val_size() const;
  void clear_val();
  static const int kValFieldNumber = 1;
  float val(int index) const;
  void set_val(int index, float value);
  void add_val(float value);
  const ::google::protobuf::RepeatedField< float >&
      val() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_val();

  // @@protoc_insertion_point(class_scope:message.FloatSlice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > val_;
  mutable int _val_cached_byte_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
  friend void ::protobuf_message_2eproto::InitDefaultsFloatSliceImpl();
};
// -------------------------------------------------------------------

class Double : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.Double) */ {
 public:
  Double();
  virtual ~Double();

  Double(const Double& from);

  inline Double& operator=(const Double& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Double(Double&& from) noexcept
    : Double() {
    *this = ::std::move(from);
  }

  inline Double& operator=(Double&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Double& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Double* internal_default_instance() {
    return reinterpret_cast<const Double*>(
               &_Double_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(Double* other);
  friend void swap(Double& a, Double& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Double* New() const PROTOBUF_FINAL { return New(NULL); }

  Double* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Double& from);
  void MergeFrom(const Double& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Double* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double Val = 1;
  void clear_val();
  static const int kValFieldNumber = 1;
  double val() const;
  void set_val(double value);

  // @@protoc_insertion_point(class_scope:message.Double)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double val_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
  friend void ::protobuf_message_2eproto::InitDefaultsDoubleImpl();
};
// -------------------------------------------------------------------

class DoubleSlice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.DoubleSlice) */ {
 public:
  DoubleSlice();
  virtual ~DoubleSlice();

  DoubleSlice(const DoubleSlice& from);

  inline DoubleSlice& operator=(const DoubleSlice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DoubleSlice(DoubleSlice&& from) noexcept
    : DoubleSlice() {
    *this = ::std::move(from);
  }

  inline DoubleSlice& operator=(DoubleSlice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DoubleSlice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoubleSlice* internal_default_instance() {
    return reinterpret_cast<const DoubleSlice*>(
               &_DoubleSlice_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(DoubleSlice* other);
  friend void swap(DoubleSlice& a, DoubleSlice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DoubleSlice* New() const PROTOBUF_FINAL { return New(NULL); }

  DoubleSlice* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DoubleSlice& from);
  void MergeFrom(const DoubleSlice& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DoubleSlice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double Val = 1;
  int val_size() const;
  void clear_val();
  static const int kValFieldNumber = 1;
  double val(int index) const;
  void set_val(int index, double value);
  void add_val(double value);
  const ::google::protobuf::RepeatedField< double >&
      val() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_val();

  // @@protoc_insertion_point(class_scope:message.DoubleSlice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > val_;
  mutable int _val_cached_byte_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
  friend void ::protobuf_message_2eproto::InitDefaultsDoubleSliceImpl();
};
// -------------------------------------------------------------------

class String : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.String) */ {
 public:
  String();
  virtual ~String();

  String(const String& from);

  inline String& operator=(const String& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  String(String&& from) noexcept
    : String() {
    *this = ::std::move(from);
  }

  inline String& operator=(String&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const String& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const String* internal_default_instance() {
    return reinterpret_cast<const String*>(
               &_String_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(String* other);
  friend void swap(String& a, String& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline String* New() const PROTOBUF_FINAL { return New(NULL); }

  String* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const String& from);
  void MergeFrom(const String& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(String* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Val = 1;
  void clear_val();
  static const int kValFieldNumber = 1;
  const ::std::string& val() const;
  void set_val(const ::std::string& value);
  #if LANG_CXX11
  void set_val(::std::string&& value);
  #endif
  void set_val(const char* value);
  void set_val(const char* value, size_t size);
  ::std::string* mutable_val();
  ::std::string* release_val();
  void set_allocated_val(::std::string* val);

  // @@protoc_insertion_point(class_scope:message.String)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr val_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
  friend void ::protobuf_message_2eproto::InitDefaultsStringImpl();
};
// -------------------------------------------------------------------

class StringSlice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.StringSlice) */ {
 public:
  StringSlice();
  virtual ~StringSlice();

  StringSlice(const StringSlice& from);

  inline StringSlice& operator=(const StringSlice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StringSlice(StringSlice&& from) noexcept
    : StringSlice() {
    *this = ::std::move(from);
  }

  inline StringSlice& operator=(StringSlice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StringSlice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StringSlice* internal_default_instance() {
    return reinterpret_cast<const StringSlice*>(
               &_StringSlice_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(StringSlice* other);
  friend void swap(StringSlice& a, StringSlice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StringSlice* New() const PROTOBUF_FINAL { return New(NULL); }

  StringSlice* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StringSlice& from);
  void MergeFrom(const StringSlice& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StringSlice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string Val = 1;
  int val_size() const;
  void clear_val();
  static const int kValFieldNumber = 1;
  const ::std::string& val(int index) const;
  ::std::string* mutable_val(int index);
  void set_val(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_val(int index, ::std::string&& value);
  #endif
  void set_val(int index, const char* value);
  void set_val(int index, const char* value, size_t size);
  ::std::string* add_val();
  void add_val(const ::std::string& value);
  #if LANG_CXX11
  void add_val(::std::string&& value);
  #endif
  void add_val(const char* value);
  void add_val(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& val() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_val();

  // @@protoc_insertion_point(class_scope:message.StringSlice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> val_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
  friend void ::protobuf_message_2eproto::InitDefaultsStringSliceImpl();
};
// -------------------------------------------------------------------

class Bool : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.Bool) */ {
 public:
  Bool();
  virtual ~Bool();

  Bool(const Bool& from);

  inline Bool& operator=(const Bool& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Bool(Bool&& from) noexcept
    : Bool() {
    *this = ::std::move(from);
  }

  inline Bool& operator=(Bool&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Bool& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bool* internal_default_instance() {
    return reinterpret_cast<const Bool*>(
               &_Bool_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(Bool* other);
  friend void swap(Bool& a, Bool& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Bool* New() const PROTOBUF_FINAL { return New(NULL); }

  Bool* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Bool& from);
  void MergeFrom(const Bool& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Bool* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool Val = 1;
  void clear_val();
  static const int kValFieldNumber = 1;
  bool val() const;
  void set_val(bool value);

  // @@protoc_insertion_point(class_scope:message.Bool)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool val_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
  friend void ::protobuf_message_2eproto::InitDefaultsBoolImpl();
};
// -------------------------------------------------------------------

class BoolSlice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.BoolSlice) */ {
 public:
  BoolSlice();
  virtual ~BoolSlice();

  BoolSlice(const BoolSlice& from);

  inline BoolSlice& operator=(const BoolSlice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BoolSlice(BoolSlice&& from) noexcept
    : BoolSlice() {
    *this = ::std::move(from);
  }

  inline BoolSlice& operator=(BoolSlice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BoolSlice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BoolSlice* internal_default_instance() {
    return reinterpret_cast<const BoolSlice*>(
               &_BoolSlice_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(BoolSlice* other);
  friend void swap(BoolSlice& a, BoolSlice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BoolSlice* New() const PROTOBUF_FINAL { return New(NULL); }

  BoolSlice* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BoolSlice& from);
  void MergeFrom(const BoolSlice& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BoolSlice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bool Val = 1;
  int val_size() const;
  void clear_val();
  static const int kValFieldNumber = 1;
  bool val(int index) const;
  void set_val(int index, bool value);
  void add_val(bool value);
  const ::google::protobuf::RepeatedField< bool >&
      val() const;
  ::google::protobuf::RepeatedField< bool >*
      mutable_val();

  // @@protoc_insertion_point(class_scope:message.BoolSlice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< bool > val_;
  mutable int _val_cached_byte_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
  friend void ::protobuf_message_2eproto::InitDefaultsBoolSliceImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Ipacket

// int32 Stx = 1;
inline void Ipacket::clear_stx() {
  stx_ = 0;
}
inline ::google::protobuf::int32 Ipacket::stx() const {
  // @@protoc_insertion_point(field_get:message.Ipacket.Stx)
  return stx_;
}
inline void Ipacket::set_stx(::google::protobuf::int32 value) {
  
  stx_ = value;
  // @@protoc_insertion_point(field_set:message.Ipacket.Stx)
}

// .message.SERVICE DestServerType = 2;
inline void Ipacket::clear_destservertype() {
  destservertype_ = 0;
}
inline ::message::SERVICE Ipacket::destservertype() const {
  // @@protoc_insertion_point(field_get:message.Ipacket.DestServerType)
  return static_cast< ::message::SERVICE >(destservertype_);
}
inline void Ipacket::set_destservertype(::message::SERVICE value) {
  
  destservertype_ = value;
  // @@protoc_insertion_point(field_set:message.Ipacket.DestServerType)
}

// int32 Ckx = 3;
inline void Ipacket::clear_ckx() {
  ckx_ = 0;
}
inline ::google::protobuf::int32 Ipacket::ckx() const {
  // @@protoc_insertion_point(field_get:message.Ipacket.Ckx)
  return ckx_;
}
inline void Ipacket::set_ckx(::google::protobuf::int32 value) {
  
  ckx_ = value;
  // @@protoc_insertion_point(field_set:message.Ipacket.Ckx)
}

// int64 Id = 4;
inline void Ipacket::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Ipacket::id() const {
  // @@protoc_insertion_point(field_get:message.Ipacket.Id)
  return id_;
}
inline void Ipacket::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:message.Ipacket.Id)
}

// -------------------------------------------------------------------

// PlayerData

// int64 PlayerID = 1;
inline void PlayerData::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PlayerData::playerid() const {
  // @@protoc_insertion_point(field_get:message.PlayerData.PlayerID)
  return playerid_;
}
inline void PlayerData::set_playerid(::google::protobuf::int64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:message.PlayerData.PlayerID)
}

// string PlayerName = 2;
inline void PlayerData::clear_playername() {
  playername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerData::playername() const {
  // @@protoc_insertion_point(field_get:message.PlayerData.PlayerName)
  return playername_.GetNoArena();
}
inline void PlayerData::set_playername(const ::std::string& value) {
  
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.PlayerData.PlayerName)
}
#if LANG_CXX11
inline void PlayerData::set_playername(::std::string&& value) {
  
  playername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.PlayerData.PlayerName)
}
#endif
inline void PlayerData::set_playername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.PlayerData.PlayerName)
}
inline void PlayerData::set_playername(const char* value, size_t size) {
  
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.PlayerData.PlayerName)
}
inline ::std::string* PlayerData::mutable_playername() {
  
  // @@protoc_insertion_point(field_mutable:message.PlayerData.PlayerName)
  return playername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerData::release_playername() {
  // @@protoc_insertion_point(field_release:message.PlayerData.PlayerName)
  
  return playername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerData::set_allocated_playername(::std::string* playername) {
  if (playername != NULL) {
    
  } else {
    
  }
  playername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playername);
  // @@protoc_insertion_point(field_set_allocated:message.PlayerData.PlayerName)
}

// int32 PlayerGold = 3;
inline void PlayerData::clear_playergold() {
  playergold_ = 0;
}
inline ::google::protobuf::int32 PlayerData::playergold() const {
  // @@protoc_insertion_point(field_get:message.PlayerData.PlayerGold)
  return playergold_;
}
inline void PlayerData::set_playergold(::google::protobuf::int32 value) {
  
  playergold_ = value;
  // @@protoc_insertion_point(field_set:message.PlayerData.PlayerGold)
}

// -------------------------------------------------------------------

// Int

// int32 Val = 1;
inline void Int::clear_val() {
  val_ = 0;
}
inline ::google::protobuf::int32 Int::val() const {
  // @@protoc_insertion_point(field_get:message.Int.Val)
  return val_;
}
inline void Int::set_val(::google::protobuf::int32 value) {
  
  val_ = value;
  // @@protoc_insertion_point(field_set:message.Int.Val)
}

// -------------------------------------------------------------------

// IntSlice

// repeated int32 Val = 1;
inline int IntSlice::val_size() const {
  return val_.size();
}
inline void IntSlice::clear_val() {
  val_.Clear();
}
inline ::google::protobuf::int32 IntSlice::val(int index) const {
  // @@protoc_insertion_point(field_get:message.IntSlice.Val)
  return val_.Get(index);
}
inline void IntSlice::set_val(int index, ::google::protobuf::int32 value) {
  val_.Set(index, value);
  // @@protoc_insertion_point(field_set:message.IntSlice.Val)
}
inline void IntSlice::add_val(::google::protobuf::int32 value) {
  val_.Add(value);
  // @@protoc_insertion_point(field_add:message.IntSlice.Val)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
IntSlice::val() const {
  // @@protoc_insertion_point(field_list:message.IntSlice.Val)
  return val_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
IntSlice::mutable_val() {
  // @@protoc_insertion_point(field_mutable_list:message.IntSlice.Val)
  return &val_;
}

// -------------------------------------------------------------------

// UInt

// uint32 Val = 1;
inline void UInt::clear_val() {
  val_ = 0u;
}
inline ::google::protobuf::uint32 UInt::val() const {
  // @@protoc_insertion_point(field_get:message.UInt.Val)
  return val_;
}
inline void UInt::set_val(::google::protobuf::uint32 value) {
  
  val_ = value;
  // @@protoc_insertion_point(field_set:message.UInt.Val)
}

// -------------------------------------------------------------------

// UIntSlice

// repeated uint32 Val = 1;
inline int UIntSlice::val_size() const {
  return val_.size();
}
inline void UIntSlice::clear_val() {
  val_.Clear();
}
inline ::google::protobuf::uint32 UIntSlice::val(int index) const {
  // @@protoc_insertion_point(field_get:message.UIntSlice.Val)
  return val_.Get(index);
}
inline void UIntSlice::set_val(int index, ::google::protobuf::uint32 value) {
  val_.Set(index, value);
  // @@protoc_insertion_point(field_set:message.UIntSlice.Val)
}
inline void UIntSlice::add_val(::google::protobuf::uint32 value) {
  val_.Add(value);
  // @@protoc_insertion_point(field_add:message.UIntSlice.Val)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
UIntSlice::val() const {
  // @@protoc_insertion_point(field_list:message.UIntSlice.Val)
  return val_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
UIntSlice::mutable_val() {
  // @@protoc_insertion_point(field_mutable_list:message.UIntSlice.Val)
  return &val_;
}

// -------------------------------------------------------------------

// Int64

// int64 Val = 1;
inline void Int64::clear_val() {
  val_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Int64::val() const {
  // @@protoc_insertion_point(field_get:message.Int64.Val)
  return val_;
}
inline void Int64::set_val(::google::protobuf::int64 value) {
  
  val_ = value;
  // @@protoc_insertion_point(field_set:message.Int64.Val)
}

// -------------------------------------------------------------------

// Int64Slice

// repeated int64 Val = 1;
inline int Int64Slice::val_size() const {
  return val_.size();
}
inline void Int64Slice::clear_val() {
  val_.Clear();
}
inline ::google::protobuf::int64 Int64Slice::val(int index) const {
  // @@protoc_insertion_point(field_get:message.Int64Slice.Val)
  return val_.Get(index);
}
inline void Int64Slice::set_val(int index, ::google::protobuf::int64 value) {
  val_.Set(index, value);
  // @@protoc_insertion_point(field_set:message.Int64Slice.Val)
}
inline void Int64Slice::add_val(::google::protobuf::int64 value) {
  val_.Add(value);
  // @@protoc_insertion_point(field_add:message.Int64Slice.Val)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Int64Slice::val() const {
  // @@protoc_insertion_point(field_list:message.Int64Slice.Val)
  return val_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Int64Slice::mutable_val() {
  // @@protoc_insertion_point(field_mutable_list:message.Int64Slice.Val)
  return &val_;
}

// -------------------------------------------------------------------

// UInt64

// uint64 Val = 1;
inline void UInt64::clear_val() {
  val_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 UInt64::val() const {
  // @@protoc_insertion_point(field_get:message.UInt64.Val)
  return val_;
}
inline void UInt64::set_val(::google::protobuf::uint64 value) {
  
  val_ = value;
  // @@protoc_insertion_point(field_set:message.UInt64.Val)
}

// -------------------------------------------------------------------

// UInt64Slice

// repeated uint64 Val = 1;
inline int UInt64Slice::val_size() const {
  return val_.size();
}
inline void UInt64Slice::clear_val() {
  val_.Clear();
}
inline ::google::protobuf::uint64 UInt64Slice::val(int index) const {
  // @@protoc_insertion_point(field_get:message.UInt64Slice.Val)
  return val_.Get(index);
}
inline void UInt64Slice::set_val(int index, ::google::protobuf::uint64 value) {
  val_.Set(index, value);
  // @@protoc_insertion_point(field_set:message.UInt64Slice.Val)
}
inline void UInt64Slice::add_val(::google::protobuf::uint64 value) {
  val_.Add(value);
  // @@protoc_insertion_point(field_add:message.UInt64Slice.Val)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
UInt64Slice::val() const {
  // @@protoc_insertion_point(field_list:message.UInt64Slice.Val)
  return val_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
UInt64Slice::mutable_val() {
  // @@protoc_insertion_point(field_mutable_list:message.UInt64Slice.Val)
  return &val_;
}

// -------------------------------------------------------------------

// Float

// float Val = 1;
inline void Float::clear_val() {
  val_ = 0;
}
inline float Float::val() const {
  // @@protoc_insertion_point(field_get:message.Float.Val)
  return val_;
}
inline void Float::set_val(float value) {
  
  val_ = value;
  // @@protoc_insertion_point(field_set:message.Float.Val)
}

// -------------------------------------------------------------------

// FloatSlice

// repeated float Val = 1;
inline int FloatSlice::val_size() const {
  return val_.size();
}
inline void FloatSlice::clear_val() {
  val_.Clear();
}
inline float FloatSlice::val(int index) const {
  // @@protoc_insertion_point(field_get:message.FloatSlice.Val)
  return val_.Get(index);
}
inline void FloatSlice::set_val(int index, float value) {
  val_.Set(index, value);
  // @@protoc_insertion_point(field_set:message.FloatSlice.Val)
}
inline void FloatSlice::add_val(float value) {
  val_.Add(value);
  // @@protoc_insertion_point(field_add:message.FloatSlice.Val)
}
inline const ::google::protobuf::RepeatedField< float >&
FloatSlice::val() const {
  // @@protoc_insertion_point(field_list:message.FloatSlice.Val)
  return val_;
}
inline ::google::protobuf::RepeatedField< float >*
FloatSlice::mutable_val() {
  // @@protoc_insertion_point(field_mutable_list:message.FloatSlice.Val)
  return &val_;
}

// -------------------------------------------------------------------

// Double

// double Val = 1;
inline void Double::clear_val() {
  val_ = 0;
}
inline double Double::val() const {
  // @@protoc_insertion_point(field_get:message.Double.Val)
  return val_;
}
inline void Double::set_val(double value) {
  
  val_ = value;
  // @@protoc_insertion_point(field_set:message.Double.Val)
}

// -------------------------------------------------------------------

// DoubleSlice

// repeated double Val = 1;
inline int DoubleSlice::val_size() const {
  return val_.size();
}
inline void DoubleSlice::clear_val() {
  val_.Clear();
}
inline double DoubleSlice::val(int index) const {
  // @@protoc_insertion_point(field_get:message.DoubleSlice.Val)
  return val_.Get(index);
}
inline void DoubleSlice::set_val(int index, double value) {
  val_.Set(index, value);
  // @@protoc_insertion_point(field_set:message.DoubleSlice.Val)
}
inline void DoubleSlice::add_val(double value) {
  val_.Add(value);
  // @@protoc_insertion_point(field_add:message.DoubleSlice.Val)
}
inline const ::google::protobuf::RepeatedField< double >&
DoubleSlice::val() const {
  // @@protoc_insertion_point(field_list:message.DoubleSlice.Val)
  return val_;
}
inline ::google::protobuf::RepeatedField< double >*
DoubleSlice::mutable_val() {
  // @@protoc_insertion_point(field_mutable_list:message.DoubleSlice.Val)
  return &val_;
}

// -------------------------------------------------------------------

// String

// string Val = 1;
inline void String::clear_val() {
  val_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& String::val() const {
  // @@protoc_insertion_point(field_get:message.String.Val)
  return val_.GetNoArena();
}
inline void String::set_val(const ::std::string& value) {
  
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.String.Val)
}
#if LANG_CXX11
inline void String::set_val(::std::string&& value) {
  
  val_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.String.Val)
}
#endif
inline void String::set_val(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.String.Val)
}
inline void String::set_val(const char* value, size_t size) {
  
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.String.Val)
}
inline ::std::string* String::mutable_val() {
  
  // @@protoc_insertion_point(field_mutable:message.String.Val)
  return val_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* String::release_val() {
  // @@protoc_insertion_point(field_release:message.String.Val)
  
  return val_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void String::set_allocated_val(::std::string* val) {
  if (val != NULL) {
    
  } else {
    
  }
  val_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), val);
  // @@protoc_insertion_point(field_set_allocated:message.String.Val)
}

// -------------------------------------------------------------------

// StringSlice

// repeated string Val = 1;
inline int StringSlice::val_size() const {
  return val_.size();
}
inline void StringSlice::clear_val() {
  val_.Clear();
}
inline const ::std::string& StringSlice::val(int index) const {
  // @@protoc_insertion_point(field_get:message.StringSlice.Val)
  return val_.Get(index);
}
inline ::std::string* StringSlice::mutable_val(int index) {
  // @@protoc_insertion_point(field_mutable:message.StringSlice.Val)
  return val_.Mutable(index);
}
inline void StringSlice::set_val(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:message.StringSlice.Val)
  val_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void StringSlice::set_val(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:message.StringSlice.Val)
  val_.Mutable(index)->assign(std::move(value));
}
#endif
inline void StringSlice::set_val(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  val_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:message.StringSlice.Val)
}
inline void StringSlice::set_val(int index, const char* value, size_t size) {
  val_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:message.StringSlice.Val)
}
inline ::std::string* StringSlice::add_val() {
  // @@protoc_insertion_point(field_add_mutable:message.StringSlice.Val)
  return val_.Add();
}
inline void StringSlice::add_val(const ::std::string& value) {
  val_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:message.StringSlice.Val)
}
#if LANG_CXX11
inline void StringSlice::add_val(::std::string&& value) {
  val_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:message.StringSlice.Val)
}
#endif
inline void StringSlice::add_val(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  val_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:message.StringSlice.Val)
}
inline void StringSlice::add_val(const char* value, size_t size) {
  val_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:message.StringSlice.Val)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StringSlice::val() const {
  // @@protoc_insertion_point(field_list:message.StringSlice.Val)
  return val_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StringSlice::mutable_val() {
  // @@protoc_insertion_point(field_mutable_list:message.StringSlice.Val)
  return &val_;
}

// -------------------------------------------------------------------

// Bool

// bool Val = 1;
inline void Bool::clear_val() {
  val_ = false;
}
inline bool Bool::val() const {
  // @@protoc_insertion_point(field_get:message.Bool.Val)
  return val_;
}
inline void Bool::set_val(bool value) {
  
  val_ = value;
  // @@protoc_insertion_point(field_set:message.Bool.Val)
}

// -------------------------------------------------------------------

// BoolSlice

// repeated bool Val = 1;
inline int BoolSlice::val_size() const {
  return val_.size();
}
inline void BoolSlice::clear_val() {
  val_.Clear();
}
inline bool BoolSlice::val(int index) const {
  // @@protoc_insertion_point(field_get:message.BoolSlice.Val)
  return val_.Get(index);
}
inline void BoolSlice::set_val(int index, bool value) {
  val_.Set(index, value);
  // @@protoc_insertion_point(field_set:message.BoolSlice.Val)
}
inline void BoolSlice::add_val(bool value) {
  val_.Add(value);
  // @@protoc_insertion_point(field_add:message.BoolSlice.Val)
}
inline const ::google::protobuf::RepeatedField< bool >&
BoolSlice::val() const {
  // @@protoc_insertion_point(field_list:message.BoolSlice.Val)
  return val_;
}
inline ::google::protobuf::RepeatedField< bool >*
BoolSlice::mutable_val() {
  // @@protoc_insertion_point(field_mutable_list:message.BoolSlice.Val)
  return &val_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::message::SERVICE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::SERVICE>() {
  return ::message::SERVICE_descriptor();
}
template <> struct is_proto_enum< ::message::CHAT> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::CHAT>() {
  return ::message::CHAT_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
