// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace message {
class IpacketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ipacket>
      _instance;
} _Ipacket_default_instance_;
class PlayerDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerData>
      _instance;
} _PlayerData_default_instance_;
class RpcHeadDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RpcHead>
      _instance;
} _RpcHead_default_instance_;
class RpcPacketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RpcPacket>
      _instance;
} _RpcPacket_default_instance_;
class ClusterInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClusterInfo>
      _instance;
} _ClusterInfo_default_instance_;
}  // namespace message
namespace protobuf_message_2eproto {
void InitDefaultsIpacketImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::message::_Ipacket_default_instance_;
    new (ptr) ::message::Ipacket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::Ipacket::InitAsDefaultInstance();
}

void InitDefaultsIpacket() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIpacketImpl);
}

void InitDefaultsPlayerDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::message::_PlayerData_default_instance_;
    new (ptr) ::message::PlayerData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::PlayerData::InitAsDefaultInstance();
}

void InitDefaultsPlayerData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerDataImpl);
}

void InitDefaultsRpcHeadImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::message::_RpcHead_default_instance_;
    new (ptr) ::message::RpcHead();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::RpcHead::InitAsDefaultInstance();
}

void InitDefaultsRpcHead() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRpcHeadImpl);
}

void InitDefaultsRpcPacketImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultsRpcHead();
  {
    void* ptr = &::message::_RpcPacket_default_instance_;
    new (ptr) ::message::RpcPacket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::RpcPacket::InitAsDefaultInstance();
}

void InitDefaultsRpcPacket() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRpcPacketImpl);
}

void InitDefaultsClusterInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::message::_ClusterInfo_default_instance_;
    new (ptr) ::message::ClusterInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::ClusterInfo::InitAsDefaultInstance();
}

void InitDefaultsClusterInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsClusterInfoImpl);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::Ipacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::Ipacket, stx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::Ipacket, destservertype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::Ipacket, ckx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::Ipacket, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::PlayerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::PlayerData, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::PlayerData, playername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::PlayerData, playergold_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::RpcHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::RpcHead, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::RpcHead, socketid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::RpcHead, srcclusterid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::RpcHead, clusterid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::RpcHead, destservertype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::RpcHead, sendtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::RpcHead, actorname_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::RpcPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::RpcPacket, funcname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::RpcPacket, arglen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::RpcPacket, rpchead_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::RpcPacket, rpcbody_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::ClusterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::ClusterInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::ClusterInfo, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::ClusterInfo, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::ClusterInfo, weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::ClusterInfo, socketid_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::message::Ipacket)},
  { 9, -1, sizeof(::message::PlayerData)},
  { 17, -1, sizeof(::message::RpcHead)},
  { 29, -1, sizeof(::message::RpcPacket)},
  { 38, -1, sizeof(::message::ClusterInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::message::_Ipacket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::message::_PlayerData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::message::_RpcHead_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::message::_RpcPacket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::message::_ClusterInfo_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "message.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rmessage.proto\022\007message\"Y\n\007Ipacket\022\013\n\003S"
      "tx\030\001 \001(\005\022(\n\016DestServerType\030\002 \001(\0162\020.messa"
      "ge.SERVICE\022\013\n\003Ckx\030\003 \001(\005\022\n\n\002Id\030\004 \001(\003\"F\n\nP"
      "layerData\022\020\n\010PlayerID\030\001 \001(\003\022\022\n\nPlayerNam"
      "e\030\002 \001(\t\022\022\n\nPlayerGold\030\003 \001(\005\"\256\001\n\007RpcHead\022"
      "\n\n\002Id\030\001 \001(\003\022\020\n\010SocketId\030\002 \001(\r\022\024\n\014SrcClus"
      "terId\030\003 \001(\r\022\021\n\tClusterId\030\004 \001(\r\022(\n\016DestSe"
      "rverType\030\005 \001(\0162\020.message.SERVICE\022\037\n\010Send"
      "Type\030\006 \001(\0162\r.message.SEND\022\021\n\tActorName\030\007"
      " \001(\t\"a\n\tRpcPacket\022\020\n\010FuncName\030\001 \001(\t\022\016\n\006A"
      "rgLen\030\002 \001(\005\022!\n\007RpcHead\030\003 \001(\0132\020.message.R"
      "pcHead\022\017\n\007RpcBody\030\004 \001(\014\"i\n\013ClusterInfo\022\036"
      "\n\004Type\030\001 \001(\0162\020.message.SERVICE\022\n\n\002Ip\030\002 \001"
      "(\t\022\014\n\004Port\030\003 \001(\005\022\016\n\006Weight\030\004 \001(\005\022\020\n\010Sock"
      "etId\030\005 \001(\r*v\n\007SERVICE\022\010\n\004NONE\020\000\022\n\n\006CLIEN"
      "T\020\001\022\016\n\nGATESERVER\020\002\022\021\n\rACCOUNTSERVER\020\003\022\017"
      "\n\013WORLDSERVER\020\004\022\016\n\nZONESERVER\020\005\022\021\n\rWORLD"
      "DBSERVER\020\006*V\n\004CHAT\022\022\n\016MSG_TYPE_WORLD\020\000\022\024"
      "\n\020MSG_TYPE_PRIVATE\020\001\022\020\n\014MSG_TYPE_ORG\020\002\022\022"
      "\n\016MSG_TYPE_COUNT\020\003*.\n\004SEND\022\t\n\005POINT\020\000\022\013\n"
      "\007BALANCE\020\001\022\016\n\nBOARD_CAST\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 834);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_message_2eproto
namespace message {
const ::google::protobuf::EnumDescriptor* SERVICE_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[0];
}
bool SERVICE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CHAT_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[1];
}
bool CHAT_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SEND_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[2];
}
bool SEND_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Ipacket::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ipacket::kStxFieldNumber;
const int Ipacket::kDestServerTypeFieldNumber;
const int Ipacket::kCkxFieldNumber;
const int Ipacket::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ipacket::Ipacket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultsIpacket();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.Ipacket)
}
Ipacket::Ipacket(const Ipacket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stx_, &from.stx_,
    static_cast<size_t>(reinterpret_cast<char*>(&ckx_) -
    reinterpret_cast<char*>(&stx_)) + sizeof(ckx_));
  // @@protoc_insertion_point(copy_constructor:message.Ipacket)
}

void Ipacket::SharedCtor() {
  ::memset(&stx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ckx_) -
      reinterpret_cast<char*>(&stx_)) + sizeof(ckx_));
  _cached_size_ = 0;
}

Ipacket::~Ipacket() {
  // @@protoc_insertion_point(destructor:message.Ipacket)
  SharedDtor();
}

void Ipacket::SharedDtor() {
}

void Ipacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ipacket::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ipacket& Ipacket::default_instance() {
  ::protobuf_message_2eproto::InitDefaultsIpacket();
  return *internal_default_instance();
}

Ipacket* Ipacket::New(::google::protobuf::Arena* arena) const {
  Ipacket* n = new Ipacket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ipacket::Clear() {
// @@protoc_insertion_point(message_clear_start:message.Ipacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&stx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ckx_) -
      reinterpret_cast<char*>(&stx_)) + sizeof(ckx_));
  _internal_metadata_.Clear();
}

bool Ipacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.Ipacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Stx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .message.SERVICE DestServerType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_destservertype(static_cast< ::message::SERVICE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Ckx = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ckx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 Id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.Ipacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.Ipacket)
  return false;
#undef DO_
}

void Ipacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.Ipacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Stx = 1;
  if (this->stx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stx(), output);
  }

  // .message.SERVICE DestServerType = 2;
  if (this->destservertype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->destservertype(), output);
  }

  // int32 Ckx = 3;
  if (this->ckx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ckx(), output);
  }

  // int64 Id = 4;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:message.Ipacket)
}

::google::protobuf::uint8* Ipacket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:message.Ipacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Stx = 1;
  if (this->stx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stx(), target);
  }

  // .message.SERVICE DestServerType = 2;
  if (this->destservertype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->destservertype(), target);
  }

  // int32 Ckx = 3;
  if (this->ckx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ckx(), target);
  }

  // int64 Id = 4;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.Ipacket)
  return target;
}

size_t Ipacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.Ipacket)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 Stx = 1;
  if (this->stx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stx());
  }

  // .message.SERVICE DestServerType = 2;
  if (this->destservertype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->destservertype());
  }

  // int64 Id = 4;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // int32 Ckx = 3;
  if (this->ckx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ckx());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ipacket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.Ipacket)
  GOOGLE_DCHECK_NE(&from, this);
  const Ipacket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ipacket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.Ipacket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.Ipacket)
    MergeFrom(*source);
  }
}

void Ipacket::MergeFrom(const Ipacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.Ipacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stx() != 0) {
    set_stx(from.stx());
  }
  if (from.destservertype() != 0) {
    set_destservertype(from.destservertype());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.ckx() != 0) {
    set_ckx(from.ckx());
  }
}

void Ipacket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.Ipacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ipacket::CopyFrom(const Ipacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.Ipacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ipacket::IsInitialized() const {
  return true;
}

void Ipacket::Swap(Ipacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ipacket::InternalSwap(Ipacket* other) {
  using std::swap;
  swap(stx_, other->stx_);
  swap(destservertype_, other->destservertype_);
  swap(id_, other->id_);
  swap(ckx_, other->ckx_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ipacket::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerData::kPlayerIDFieldNumber;
const int PlayerData::kPlayerNameFieldNumber;
const int PlayerData::kPlayerGoldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerData::PlayerData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultsPlayerData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.PlayerData)
}
PlayerData::PlayerData(const PlayerData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.playername().size() > 0) {
    playername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playername_);
  }
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playergold_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(playergold_));
  // @@protoc_insertion_point(copy_constructor:message.PlayerData)
}

void PlayerData::SharedCtor() {
  playername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playergold_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(playergold_));
  _cached_size_ = 0;
}

PlayerData::~PlayerData() {
  // @@protoc_insertion_point(destructor:message.PlayerData)
  SharedDtor();
}

void PlayerData::SharedDtor() {
  playername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerData::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerData& PlayerData::default_instance() {
  ::protobuf_message_2eproto::InitDefaultsPlayerData();
  return *internal_default_instance();
}

PlayerData* PlayerData::New(::google::protobuf::Arena* arena) const {
  PlayerData* n = new PlayerData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.PlayerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playergold_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(playergold_));
  _internal_metadata_.Clear();
}

bool PlayerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.PlayerData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 PlayerID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string PlayerName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->playername().data(), static_cast<int>(this->playername().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "message.PlayerData.PlayerName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 PlayerGold = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playergold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.PlayerData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.PlayerData)
  return false;
#undef DO_
}

void PlayerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.PlayerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 PlayerID = 1;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // string PlayerName = 2;
  if (this->playername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playername().data(), static_cast<int>(this->playername().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "message.PlayerData.PlayerName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->playername(), output);
  }

  // int32 PlayerGold = 3;
  if (this->playergold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playergold(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:message.PlayerData)
}

::google::protobuf::uint8* PlayerData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:message.PlayerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 PlayerID = 1;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // string PlayerName = 2;
  if (this->playername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playername().data(), static_cast<int>(this->playername().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "message.PlayerData.PlayerName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playername(), target);
  }

  // int32 PlayerGold = 3;
  if (this->playergold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playergold(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.PlayerData)
  return target;
}

size_t PlayerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.PlayerData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string PlayerName = 2;
  if (this->playername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playername());
  }

  // int64 PlayerID = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->playerid());
  }

  // int32 PlayerGold = 3;
  if (this->playergold() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playergold());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.PlayerData)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.PlayerData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.PlayerData)
    MergeFrom(*source);
  }
}

void PlayerData::MergeFrom(const PlayerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.PlayerData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playername().size() > 0) {

    playername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playername_);
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.playergold() != 0) {
    set_playergold(from.playergold());
  }
}

void PlayerData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.PlayerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerData::CopyFrom(const PlayerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.PlayerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerData::IsInitialized() const {
  return true;
}

void PlayerData::Swap(PlayerData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerData::InternalSwap(PlayerData* other) {
  using std::swap;
  playername_.Swap(&other->playername_);
  swap(playerid_, other->playerid_);
  swap(playergold_, other->playergold_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerData::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RpcHead::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RpcHead::kIdFieldNumber;
const int RpcHead::kSocketIdFieldNumber;
const int RpcHead::kSrcClusterIdFieldNumber;
const int RpcHead::kClusterIdFieldNumber;
const int RpcHead::kDestServerTypeFieldNumber;
const int RpcHead::kSendTypeFieldNumber;
const int RpcHead::kActorNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpcHead::RpcHead()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultsRpcHead();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.RpcHead)
}
RpcHead::RpcHead(const RpcHead& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  actorname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.actorname().size() > 0) {
    actorname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.actorname_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sendtype_) -
    reinterpret_cast<char*>(&id_)) + sizeof(sendtype_));
  // @@protoc_insertion_point(copy_constructor:message.RpcHead)
}

void RpcHead::SharedCtor() {
  actorname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sendtype_) -
      reinterpret_cast<char*>(&id_)) + sizeof(sendtype_));
  _cached_size_ = 0;
}

RpcHead::~RpcHead() {
  // @@protoc_insertion_point(destructor:message.RpcHead)
  SharedDtor();
}

void RpcHead::SharedDtor() {
  actorname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RpcHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcHead::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RpcHead& RpcHead::default_instance() {
  ::protobuf_message_2eproto::InitDefaultsRpcHead();
  return *internal_default_instance();
}

RpcHead* RpcHead::New(::google::protobuf::Arena* arena) const {
  RpcHead* n = new RpcHead;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RpcHead::Clear() {
// @@protoc_insertion_point(message_clear_start:message.RpcHead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sendtype_) -
      reinterpret_cast<char*>(&id_)) + sizeof(sendtype_));
  _internal_metadata_.Clear();
}

bool RpcHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.RpcHead)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 Id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 SocketId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &socketid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 SrcClusterId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcclusterid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ClusterId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clusterid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .message.SERVICE DestServerType = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_destservertype(static_cast< ::message::SERVICE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .message.SEND SendType = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_sendtype(static_cast< ::message::SEND >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ActorName = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_actorname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->actorname().data(), static_cast<int>(this->actorname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "message.RpcHead.ActorName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.RpcHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.RpcHead)
  return false;
#undef DO_
}

void RpcHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.RpcHead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 Id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // uint32 SocketId = 2;
  if (this->socketid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->socketid(), output);
  }

  // uint32 SrcClusterId = 3;
  if (this->srcclusterid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->srcclusterid(), output);
  }

  // uint32 ClusterId = 4;
  if (this->clusterid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->clusterid(), output);
  }

  // .message.SERVICE DestServerType = 5;
  if (this->destservertype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->destservertype(), output);
  }

  // .message.SEND SendType = 6;
  if (this->sendtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->sendtype(), output);
  }

  // string ActorName = 7;
  if (this->actorname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->actorname().data(), static_cast<int>(this->actorname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "message.RpcHead.ActorName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->actorname(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:message.RpcHead)
}

::google::protobuf::uint8* RpcHead::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:message.RpcHead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 Id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // uint32 SocketId = 2;
  if (this->socketid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->socketid(), target);
  }

  // uint32 SrcClusterId = 3;
  if (this->srcclusterid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->srcclusterid(), target);
  }

  // uint32 ClusterId = 4;
  if (this->clusterid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->clusterid(), target);
  }

  // .message.SERVICE DestServerType = 5;
  if (this->destservertype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->destservertype(), target);
  }

  // .message.SEND SendType = 6;
  if (this->sendtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->sendtype(), target);
  }

  // string ActorName = 7;
  if (this->actorname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->actorname().data(), static_cast<int>(this->actorname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "message.RpcHead.ActorName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->actorname(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.RpcHead)
  return target;
}

size_t RpcHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.RpcHead)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ActorName = 7;
  if (this->actorname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->actorname());
  }

  // int64 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // uint32 SocketId = 2;
  if (this->socketid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->socketid());
  }

  // uint32 SrcClusterId = 3;
  if (this->srcclusterid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->srcclusterid());
  }

  // uint32 ClusterId = 4;
  if (this->clusterid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clusterid());
  }

  // .message.SERVICE DestServerType = 5;
  if (this->destservertype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->destservertype());
  }

  // .message.SEND SendType = 6;
  if (this->sendtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sendtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcHead::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.RpcHead)
  GOOGLE_DCHECK_NE(&from, this);
  const RpcHead* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RpcHead>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.RpcHead)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.RpcHead)
    MergeFrom(*source);
  }
}

void RpcHead::MergeFrom(const RpcHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.RpcHead)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.actorname().size() > 0) {

    actorname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.actorname_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.socketid() != 0) {
    set_socketid(from.socketid());
  }
  if (from.srcclusterid() != 0) {
    set_srcclusterid(from.srcclusterid());
  }
  if (from.clusterid() != 0) {
    set_clusterid(from.clusterid());
  }
  if (from.destservertype() != 0) {
    set_destservertype(from.destservertype());
  }
  if (from.sendtype() != 0) {
    set_sendtype(from.sendtype());
  }
}

void RpcHead::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.RpcHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcHead::CopyFrom(const RpcHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.RpcHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcHead::IsInitialized() const {
  return true;
}

void RpcHead::Swap(RpcHead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpcHead::InternalSwap(RpcHead* other) {
  using std::swap;
  actorname_.Swap(&other->actorname_);
  swap(id_, other->id_);
  swap(socketid_, other->socketid_);
  swap(srcclusterid_, other->srcclusterid_);
  swap(clusterid_, other->clusterid_);
  swap(destservertype_, other->destservertype_);
  swap(sendtype_, other->sendtype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RpcHead::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RpcPacket::InitAsDefaultInstance() {
  ::message::_RpcPacket_default_instance_._instance.get_mutable()->rpchead_ = const_cast< ::message::RpcHead*>(
      ::message::RpcHead::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RpcPacket::kFuncNameFieldNumber;
const int RpcPacket::kArgLenFieldNumber;
const int RpcPacket::kRpcHeadFieldNumber;
const int RpcPacket::kRpcBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpcPacket::RpcPacket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultsRpcPacket();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.RpcPacket)
}
RpcPacket::RpcPacket(const RpcPacket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  funcname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.funcname().size() > 0) {
    funcname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.funcname_);
  }
  rpcbody_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rpcbody().size() > 0) {
    rpcbody_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rpcbody_);
  }
  if (from.has_rpchead()) {
    rpchead_ = new ::message::RpcHead(*from.rpchead_);
  } else {
    rpchead_ = NULL;
  }
  arglen_ = from.arglen_;
  // @@protoc_insertion_point(copy_constructor:message.RpcPacket)
}

void RpcPacket::SharedCtor() {
  funcname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rpcbody_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&rpchead_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&arglen_) -
      reinterpret_cast<char*>(&rpchead_)) + sizeof(arglen_));
  _cached_size_ = 0;
}

RpcPacket::~RpcPacket() {
  // @@protoc_insertion_point(destructor:message.RpcPacket)
  SharedDtor();
}

void RpcPacket::SharedDtor() {
  funcname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rpcbody_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rpchead_;
}

void RpcPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcPacket::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RpcPacket& RpcPacket::default_instance() {
  ::protobuf_message_2eproto::InitDefaultsRpcPacket();
  return *internal_default_instance();
}

RpcPacket* RpcPacket::New(::google::protobuf::Arena* arena) const {
  RpcPacket* n = new RpcPacket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RpcPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:message.RpcPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  funcname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rpcbody_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && rpchead_ != NULL) {
    delete rpchead_;
  }
  rpchead_ = NULL;
  arglen_ = 0;
  _internal_metadata_.Clear();
}

bool RpcPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.RpcPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string FuncName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_funcname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->funcname().data(), static_cast<int>(this->funcname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "message.RpcPacket.FuncName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ArgLen = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arglen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .message.RpcHead RpcHead = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rpchead()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes RpcBody = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rpcbody()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.RpcPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.RpcPacket)
  return false;
#undef DO_
}

void RpcPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.RpcPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string FuncName = 1;
  if (this->funcname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->funcname().data(), static_cast<int>(this->funcname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "message.RpcPacket.FuncName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->funcname(), output);
  }

  // int32 ArgLen = 2;
  if (this->arglen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->arglen(), output);
  }

  // .message.RpcHead RpcHead = 3;
  if (this->has_rpchead()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->rpchead_, output);
  }

  // bytes RpcBody = 4;
  if (this->rpcbody().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->rpcbody(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:message.RpcPacket)
}

::google::protobuf::uint8* RpcPacket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:message.RpcPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string FuncName = 1;
  if (this->funcname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->funcname().data(), static_cast<int>(this->funcname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "message.RpcPacket.FuncName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->funcname(), target);
  }

  // int32 ArgLen = 2;
  if (this->arglen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->arglen(), target);
  }

  // .message.RpcHead RpcHead = 3;
  if (this->has_rpchead()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->rpchead_, deterministic, target);
  }

  // bytes RpcBody = 4;
  if (this->rpcbody().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->rpcbody(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.RpcPacket)
  return target;
}

size_t RpcPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.RpcPacket)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string FuncName = 1;
  if (this->funcname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->funcname());
  }

  // bytes RpcBody = 4;
  if (this->rpcbody().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->rpcbody());
  }

  // .message.RpcHead RpcHead = 3;
  if (this->has_rpchead()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rpchead_);
  }

  // int32 ArgLen = 2;
  if (this->arglen() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->arglen());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcPacket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.RpcPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const RpcPacket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RpcPacket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.RpcPacket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.RpcPacket)
    MergeFrom(*source);
  }
}

void RpcPacket::MergeFrom(const RpcPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.RpcPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.funcname().size() > 0) {

    funcname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.funcname_);
  }
  if (from.rpcbody().size() > 0) {

    rpcbody_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rpcbody_);
  }
  if (from.has_rpchead()) {
    mutable_rpchead()->::message::RpcHead::MergeFrom(from.rpchead());
  }
  if (from.arglen() != 0) {
    set_arglen(from.arglen());
  }
}

void RpcPacket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.RpcPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcPacket::CopyFrom(const RpcPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.RpcPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcPacket::IsInitialized() const {
  return true;
}

void RpcPacket::Swap(RpcPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpcPacket::InternalSwap(RpcPacket* other) {
  using std::swap;
  funcname_.Swap(&other->funcname_);
  rpcbody_.Swap(&other->rpcbody_);
  swap(rpchead_, other->rpchead_);
  swap(arglen_, other->arglen_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RpcPacket::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ClusterInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClusterInfo::kTypeFieldNumber;
const int ClusterInfo::kIpFieldNumber;
const int ClusterInfo::kPortFieldNumber;
const int ClusterInfo::kWeightFieldNumber;
const int ClusterInfo::kSocketIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClusterInfo::ClusterInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultsClusterInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.ClusterInfo)
}
ClusterInfo::ClusterInfo(const ClusterInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&socketid_) -
    reinterpret_cast<char*>(&type_)) + sizeof(socketid_));
  // @@protoc_insertion_point(copy_constructor:message.ClusterInfo)
}

void ClusterInfo::SharedCtor() {
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&socketid_) -
      reinterpret_cast<char*>(&type_)) + sizeof(socketid_));
  _cached_size_ = 0;
}

ClusterInfo::~ClusterInfo() {
  // @@protoc_insertion_point(destructor:message.ClusterInfo)
  SharedDtor();
}

void ClusterInfo::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ClusterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusterInfo::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClusterInfo& ClusterInfo::default_instance() {
  ::protobuf_message_2eproto::InitDefaultsClusterInfo();
  return *internal_default_instance();
}

ClusterInfo* ClusterInfo::New(::google::protobuf::Arena* arena) const {
  ClusterInfo* n = new ClusterInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClusterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:message.ClusterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&socketid_) -
      reinterpret_cast<char*>(&type_)) + sizeof(socketid_));
  _internal_metadata_.Clear();
}

bool ClusterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.ClusterInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .message.SERVICE Type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::message::SERVICE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "message.ClusterInfo.Ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Weight = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 SocketId = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &socketid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.ClusterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.ClusterInfo)
  return false;
#undef DO_
}

void ClusterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.ClusterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.SERVICE Type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string Ip = 2;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "message.ClusterInfo.Ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // int32 Port = 3;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // int32 Weight = 4;
  if (this->weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->weight(), output);
  }

  // uint32 SocketId = 5;
  if (this->socketid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->socketid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:message.ClusterInfo)
}

::google::protobuf::uint8* ClusterInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:message.ClusterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.SERVICE Type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // string Ip = 2;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "message.ClusterInfo.Ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // int32 Port = 3;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // int32 Weight = 4;
  if (this->weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->weight(), target);
  }

  // uint32 SocketId = 5;
  if (this->socketid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->socketid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.ClusterInfo)
  return target;
}

size_t ClusterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.ClusterInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string Ip = 2;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // .message.SERVICE Type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // int32 Port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  // int32 Weight = 4;
  if (this->weight() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->weight());
  }

  // uint32 SocketId = 5;
  if (this->socketid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->socketid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusterInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.ClusterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ClusterInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClusterInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.ClusterInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.ClusterInfo)
    MergeFrom(*source);
  }
}

void ClusterInfo::MergeFrom(const ClusterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.ClusterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.weight() != 0) {
    set_weight(from.weight());
  }
  if (from.socketid() != 0) {
    set_socketid(from.socketid());
  }
}

void ClusterInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.ClusterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterInfo::CopyFrom(const ClusterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.ClusterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterInfo::IsInitialized() const {
  return true;
}

void ClusterInfo::Swap(ClusterInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClusterInfo::InternalSwap(ClusterInfo* other) {
  using std::swap;
  ip_.Swap(&other->ip_);
  swap(type_, other->type_);
  swap(port_, other->port_);
  swap(weight_, other->weight_);
  swap(socketid_, other->socketid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClusterInfo::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace message

// @@protoc_insertion_point(global_scope)
